{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["window","Buffer","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","concat","App","_useState","useState","_useState2","_slicedToArray","walletAddress","setWalletAddress","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","gifList","setGifList","checkIfWalletIsConnected","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","_window$solana","response","wrap","_context","prev","next","solana","isPhantom","console","log","connect","onlyIfTrusted","sent","publicKey","toString","alert","stop","apply","arguments","connectWallet","_ref2","_callee2","_window2","_context2","sendGif","_ref3","_callee3","provider","program","_context3","length","abrupt","getProvider","getProgram","rpc","addGif","accounts","user","wallet","getGifList","t0","onInputChange","event","value","target","connection","Connection","AnchorProvider","_ref4","_callee4","idl","_context4","Program","fetchIdl","_ref5","_callee5","account","_context5","fetch","createGifAccount","_ref6","_callee6","_context6","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","_ref7","_callee7","_context7","addEventListener","removeEventListener","_jsx","className","children","_jsxs","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c739656.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, AnchorProvider, web3\n} from '@project-serum/anchor';\nimport kp from './keypair.json'\n// Other imports...\n// Add this 2 new lines\nimport { Buffer } from \"buffer\";\nwindow.Buffer = Buffer;\n// Constants\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\nconst programID = new PublicKey(\"8EQ8AbjAi6mEyq2nk5b4N8K2NKWotzBbqyMXqQKR7Dth\");\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// All your other Twitter and GIF constants you had.\n\nconst TWITTER_HANDLE = 'lambersonn_';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = [\n\t'https://media4.giphy.com/media/4AMPEcnNSDhfzZE3EV/giphy.gif?cid=ecf05e47snvdjvhszan72q41dsz9zcbknhanx3pejx15hg6s&rid=giphy.gif&ct=g',\n\t'https://media3.giphy.com/media/yvAco8XNqJafSfLmBP/giphy.gif?cid=ecf05e47hn3ksod4faa79g9v5xj8gbjks84m9ikozntkii9i&rid=giphy.gif&ct=g',\n\t'https://media3.giphy.com/media/W1TPavKSPEVVjz4LAJ/giphy.gif?cid=ecf05e470aayn6cu7a5dmzmm0mwgx1u9aoxhjo9t3kqyvw3c&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/HMpcgxAZs5YYHsbe8P/giphy.gif?cid=ecf05e47ohka5xpbk4y7ipz850kj3j28t2jzzaw49gpq6063&rid=giphy.gif&ct=g'\n]\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    if (window?.solana?.isPhantom) {\n      console.log('Phantom wallet found!');\n      const response = await window.solana.connect({ onlyIfTrusted: true });\n      console.log(\n        'Connected with Public Key:',\n        response.publicKey.toString()\n      );\n  \n      /*\n       * Set the user's publicKey in state to be used later!\n       */\n      setWalletAddress(response.publicKey.toString());\n    } else {\n      alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n    }\n  };\n\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider()\n      const program = await getProgram(); \n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n  const connection = new Connection(network, opts.preflightCommitment);\n  const provider = new AnchorProvider(\n    connection, window.solana, opts.preflightCommitment,\n  );\n  return provider;\n}\n\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const getProgram = async () => {\n  // Get metadata about your solana program\n  const idl = await Program.fetchIdl(programID, getProvider());\n  // Create a program that you can call\n  return new Program(idl, programID, getProvider());\n};\n\nconst getGifList = async() => {\n  try {\n    const program = await getProgram(); \n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    \n    console.log(\"Got the account\", account)\n    setGifList(account.gifList)\n\n  } catch (error) {\n    console.log(\"Error in getGifList: \", error)\n    setGifList(null);\n  }\n};\n\nconst createGifAccount = async () => {\n  try {\n    const provider = getProvider();\n    const program = await getProgram();\n    \n    console.log(\"ping\")\n    await program.rpc.startStuffOff({\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n      signers: [baseAccount]\n    });\n    console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n    await getGifList();\n\n  } catch(error) {\n    console.log(\"Error creating BaseAccount account:\", error)\n  }\n}\n\nconst renderConnectedContainer = () => {\n  // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n useEffect(() => {\n  if (walletAddress) {\n    console.log('Fetching GIF list...');\n    getGifList()\n  }\n}, [walletAddress]);\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">âš½ My Footballer</p>\n          <p className=\"sub-text\">\n            Add your best footballer into the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}